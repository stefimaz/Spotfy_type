{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useIPFS } from \"./useIPFS\";\n\nconst useAudio = url => {\n  _s();\n\n  const {\n    resolveLink\n  } = useIPFS();\n  const [audio, setAudio] = useState(url);\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [newSong, setNewSong] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const audioRef = useRef(new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_url)));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(audio.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < audio.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    toggle();\n    setAudio(url);\n\n    if (trackIndex === 0) {\n      setNewSong(newSong + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  }, [url]);\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      clearInterval(intervalRef.current);\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_url));\n    audioRef.current.volume = volume;\n    setTrackProgress(Math.round(audioRef.current.currentTime));\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [trackIndex, newSong]);\n\n  const toggle = () => setIsPlaying(!isPlaying);\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(Math.round(audioRef.current.currentTime));\n      }\n    }, [1000]);\n  };\n\n  const onSearch = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onSearchEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  const onVolume = vol => {\n    setVolume(vol);\n    audioRef.current.volume = vol;\n  };\n\n  return [isPlaying, duration, toggle, toNextTrack, toPrevTrack, trackProgress, onSearch, onSearchEnd, onVolume, trackIndex];\n};\n\n_s(useAudio, \"QN/2sL4vKklLgRAJV0xQql52gCI=\", false, function () {\n  return [useIPFS];\n});\n\nexport default useAudio;","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Spotfy_type/src/hooks/useAudio.js"],"names":["React","useState","useEffect","useRef","useIPFS","useAudio","url","resolveLink","audio","setAudio","trackIndex","setTrackIndex","newSong","setNewSong","trackProgress","setTrackProgress","isPlaying","setIsPlaying","volume","setVolume","audioRef","Audio","JSON","parse","metadata","animation_url","intervalRef","isReady","duration","current","toPrevTrack","length","toNextTrack","toggle","play","startTimer","clearInterval","pause","Math","round","currentTime","setInterval","ended","onSearch","value","onSearchEnd","onVolume","vol"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useIPFS } from \"./useIPFS\";\n\nconst useAudio = (url) => {\n    const { resolveLink } = useIPFS();\n    const [audio, setAudio] = useState(url);\n    const [trackIndex, setTrackIndex] = useState(0);\n    const [newSong, setNewSong] = useState(0);\n    const [trackProgress, setTrackProgress] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [volume, setVolume] = useState(1);\n    const audioRef = useRef(new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_url)));\n\n    const intervalRef = useRef();\n    const isReady = useRef(false);\n\n    const { duration } = audioRef.current;\n\n    const toPrevTrack = () => {\n        if (trackIndex - 1 < 0) {\n            setTrackIndex(audio.length - 1);\n        } else {\n            setTrackIndex(trackIndex - 1);\n        }\n    };\n\n    const toNextTrack = () => {\n        if (trackIndex < audio.length - 1) {\n            setTrackIndex(trackIndex + 1);\n        } else {\n            setTrackIndex(0);\n        }\n    };\n\n    useEffect(() => {\n        toggle();\n        setAudio(url);\n        if (trackIndex === 0) {\n            setNewSong(newSong + 1)\n        } else {\n            setTrackIndex(0);\n        }\n    }, [url]);\n\n    useEffect(() => {\n        if (isPlaying) {\n            audioRef.current.play();\n            startTimer();\n        } else {\n            clearInterval(intervalRef.current);\n            audioRef.current.pause();\n        }\n    }, [isPlaying]);\n\n    useEffect(() => {\n        return () => {\n            audioRef.current.pause();\n            clearInterval(intervalRef.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        audioRef.current.pause();\n        audioRef.current = new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_url));\n        audioRef.current.volume = volume;\n        setTrackProgress(Math.round(audioRef.current.currentTime));\n        if (isReady.current) {\n            audioRef.current.play();\n            setIsPlaying(true);\n            startTimer();\n        } else {\n            isReady.current = true;\n        }\n    }, [trackIndex, newSong]);\n\n    const toggle = () => setIsPlaying(!isPlaying);\n\n    const startTimer = () => {\n        clearInterval(intervalRef.current);\n\n        intervalRef.current = setInterval(() => {\n            if (audioRef.current.ended) {\n                toNextTrack();\n            } else {\n                setTrackProgress(Math.round(audioRef.current.currentTime));\n            }\n        }, [1000]);\n    };\n\n    const onSearch = (value) => {\n        clearInterval(intervalRef.current);\n        audioRef.current.currentTime = value;\n        setTrackProgress(audioRef.current.currentTime);\n    }\n\n    const onSearchEnd = () => {\n        if (!isPlaying) {\n            setIsPlaying(true);\n        }\n        startTimer();\n    }\n\n    const onVolume = (vol) => {\n        setVolume(vol);\n        audioRef.current.volume = vol;\n    };\n\n    return [isPlaying, duration, toggle, toNextTrack, toPrevTrack, trackProgress, onSearch, onSearchEnd, onVolume, trackIndex];\n};\n\nexport default useAudio;"]},"metadata":{},"sourceType":"module"}